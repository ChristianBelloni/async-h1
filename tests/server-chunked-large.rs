use http_types::{Body, Response, StatusCode};

mod common;

const REQUEST: &'static str = concat![
    "GET / HTTP/1.1\r\n",
    "host: example.com\r\n",
    "user-agent: curl/7.54.0\r\n",
    "content-type: text/plain\r\n",
    "transfer-encoding: chunked\r\n",
    "\r\n",
    "453\r\n",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "\r\n",
    "0",
    "\r\n",
    "\r\n",
];

const RESPONSE: &'static str = concat![
    "HTTP/1.1 200 OK\r\n",
    "transfer-encoding: chunked\r\n",
    "date: {DATE}\r\n",
    "content-type: application/octet-stream\r\n",
    "\r\n",
    "453\r\n",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "\r\n",
    "0",
    "\r\n",
    "\r\n",
];

#[async_std::test]
async fn server_chunked_large() {
    let case = common::TestCase2::new(REQUEST, "").await;
    async_h1::accept("http://example.com", case.clone(), |req| async {
        let mut res = Response::new(StatusCode::Ok);
        res.set_body(Body::from_reader(req, None));
        Ok(res)
    })
    .await
    .unwrap();
    case.assert_writer_with(RESPONSE, common::munge_date).await;
}
